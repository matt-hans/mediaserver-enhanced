version: '3.8'

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # VPN Gateway Container with Enhanced Health Checks and Kill Switch
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # Client mode configuration - no PEERS or SERVERURL
    volumes:
      - ./config/wireguard:/config
      #       - ./scripts/wireguard-entrypoint.sh:/custom-cont-init.d/99-vpn-killswitch:ro
      - /lib/modules:/lib/modules:ro
    ports:
      - "${TRANSMISSION_PORT}:9091"
      - "${TRANSMISSION_PEER_PORT}:51413"
      - "${TRANSMISSION_PEER_PORT}:51413/udp"
      - "${JACKETT_PORT}:9117"
      # Remove server port 51820 - we're a client
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=${DISABLE_IPV6}
      - net.ipv4.ip_forward=1
    restart: unless-stopped
    networks:
      default:
    healthcheck:
      test: ["CMD", "/config/wireguard-health-check.sh"]
      interval: 45s
      timeout: 30s
      retries: 5
      start_period: 120s
    labels:
      - "com.docker.compose.project=mediaserver"
      - "autoheal=true"

  # Torrent Client with Relaxed Dependencies and Enhanced Recovery
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    network_mode: service:wireguard
    depends_on:
      wireguard:
        condition: service_started
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - USER=${TRANSMISSION_USER}
      - PASS=${TRANSMISSION_PASS}
      - WHITELIST=${TRANSMISSION_WHITELIST}
      - PEERPORT=${TRANSMISSION_PEER_PORT}
      - HOST_WHITELIST=${TRANSMISSION_HOST_WHITELIST}
    volumes:
      - ./config/transmission:/config
      - /mnt/storage/downloads:/downloads
      - /mnt/storage/media:/media
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:9091/transmission/web/ --max-time 15 --retry 2 || exit 1"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 180s
    labels:
      - "com.docker.compose.project=mediaserver"
      - "autoheal=true"

  # Indexer Proxy with Relaxed Dependencies and Enhanced Recovery
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    network_mode: service:wireguard
    depends_on:
      wireguard:
        condition: service_started
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true
    volumes:
      - ./config/jackett:/config
      - /mnt/storage/downloads/watch:/downloads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:9117/UI/Dashboard --max-time 15 --retry 2 || exit 1"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 180s
    labels:
      - "com.docker.compose.project=mediaserver"
      - "autoheal=true"

  # Media Server with Hardware Acceleration Support
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    user: ${PUID}:${PGID}
    group_add:
      - "109"  # render group for hardware acceleration
    environment:
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_URL}
    volumes:
      - ./config/jellyfin:/config
      - /mnt/storage/media:/media
      - /mnt/storage/downloads/complete:/downloads:ro
      - /opt/vc/lib:/opt/vc/lib:ro  # Raspberry Pi GPU libraries
    ports:
      - "${JELLYFIN_PORT}:8096"
    restart: unless-stopped
    networks:
      default:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health", "--max-time", "15"]
      interval: 45s
      timeout: 20s
      retries: 3
      start_period: 90s
    labels:
      - "com.docker.compose.project=mediaserver"
      - "autoheal=true"

  # Enhanced Container Health Monitor with Smarter Recovery
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=autoheal
      - AUTOHEAL_INTERVAL=180
      - AUTOHEAL_START_PERIOD=600
      - AUTOHEAL_DEFAULT_STOP_TIMEOUT=30
      - WEBHOOK_URL=${AUTOHEAL_WEBHOOK_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      default:
    healthcheck:
      test: ["CMD", "pgrep", "-f", "docker-entrypoint"]
      interval: 120s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.docker.compose.project=mediaserver"

  # Automatic Updates with Enhanced Scheduling
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
      - WATCHTOWER_TIMEOUT=60s
      - WATCHTOWER_ROLLING_RESTART=false
      - WATCHTOWER_LIFECYCLE_HOOKS=true
      - WATCHTOWER_POLL_INTERVAL=86400
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      default:
    healthcheck:
      test: ["CMD", "pgrep", "watchtower"]
      interval: 300s
      timeout: 15s
      retries: 2
      start_period: 120s
    labels:
      - "com.docker.compose.project=mediaserver"
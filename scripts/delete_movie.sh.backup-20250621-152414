#\!/bin/bash
# Interactive movie deletion script with selection menu

DOWNLOADS_DIR="/mnt/storage/downloads/complete"
MEDIA_DIR="/mnt/storage/media"

echo "=== Movie Deletion Tool ==="
echo "Scanning downloads directory: $DOWNLOADS_DIR"
echo

# Check if downloads directory exists
if [ \! -d "$DOWNLOADS_DIR" ]; then
    echo "Error: Downloads directory not found: $DOWNLOADS_DIR"
    exit 1
fi

# Simple approach - use ls and process each line
cd "$DOWNLOADS_DIR" || exit 1
echo "Available items for deletion:"
echo "0) Cancel (exit without deleting)"

# Create indexed list
counter=1
declare -a items
while IFS= read -r item; do
    if [ -n "$item" ]; then
        items[$counter]="$item"
        echo "$counter) $item"
        counter=$((counter + 1))
    fi
done < <(ls -1)

if [ ${#items[@]} -eq 0 ]; then
    echo "No items found in downloads directory."
    exit 0
fi

echo
echo -n "Select item to delete (0-$((counter-1))): "
read selection

# Validate selection
if \! [[ "$selection" =~ ^[0-9]+$ ]]; then
    echo "Invalid selection. Must be a number."
    exit 1
fi

if [ "$selection" -eq 0 ]; then
    echo "Operation cancelled."
    exit 0
fi

if [ "$selection" -lt 1 ] || [ "$selection" -ge "$counter" ]; then
    echo "Invalid selection. Please enter a number between 0 and $((counter-1))."
    exit 1
fi

selected_item="${items[$selection]}"

echo
echo "Selected: $selected_item"
echo

# Confirm deletion
echo -n "Are you sure you want to delete \"$selected_item\"? (y/N): "
read confirm
if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo "Operation cancelled."
    exit 0
fi

echo
echo "Deleting: $selected_item"

# Delete from downloads directory
downloads_path="$DOWNLOADS_DIR/$selected_item"
if [ -e "$downloads_path" ]; then
    echo "Removing from downloads: $downloads_path"
    rm -rf "$downloads_path"
    if [ $? -eq 0 ]; then
        echo "✓ Successfully removed from downloads"
    else
        echo "✗ Failed to remove from downloads"
        exit 1
    fi
else
    echo "Item not found in downloads directory"
    exit 1
fi

# Search for related files in media directory using partial matching
echo
echo "Searching for related files in media directory..."

# Extract a unique part of the filename for searching (first few words)
search_term=$(echo "$selected_item" | sed "s/[^a-zA-Z0-9 ]/ /g" | awk "{print \$1 \" \" \$2}" | sed "s/ *$//")

if [ -n "$search_term" ] && [ ${#search_term} -gt 3 ]; then
    echo "Searching for: $search_term"
    
    # Find files
    media_files=$(find "$MEDIA_DIR" -name "*$search_term*" -type f 2>/dev/null)
    media_dirs=$(find "$MEDIA_DIR" -name "*$search_term*" -type d 2>/dev/null)
    
    if [ -n "$media_files" ]; then
        echo "Found related files in media directory:"
        echo "$media_files"
        echo
        echo -n "Delete these media files too? (y/N): "
        read confirm_media
        if [[ "$confirm_media" =~ ^[Yy]$ ]]; then
            echo "$media_files" | while IFS= read -r file; do
                if [ -f "$file" ]; then
                    rm -f "$file"
                    echo "✓ Removed: $file"
                fi
            done
        fi
    fi
    
    if [ -n "$media_dirs" ]; then
        echo "Checking for empty directories in media..."
        echo "$media_dirs" | while IFS= read -r dir; do
            if [ -d "$dir" ] && [ -z "$(ls -A "$dir" 2>/dev/null)" ]; then
                rmdir "$dir" 2>/dev/null
                echo "✓ Removed empty directory: $dir"
            fi
        done
    fi
else
    echo "Could not determine search term for media cleanup"
fi

echo
echo "Triggering Jellyfin library refresh..."
curl -s -X POST "http://localhost:8096/Library/Refresh" > /dev/null 2>&1
echo "✓ Jellyfin refresh triggered"

echo
echo "Deletion complete\!"

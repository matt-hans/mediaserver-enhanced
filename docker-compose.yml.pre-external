version: '3.8'

networks:
  default:
    driver: bridge

services:
  # VPN Gateway Container
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SERVERURL=${VPN_SERVER_URL}
      - SERVERPORT=${VPN_SERVER_PORT}
      - PEERS=1
      - PEERDNS=1.1.1.1
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=0.0.0.0/1,128.0.0.0/2,192.0.0.0/9,192.128.0.0/11,192.160.0.0/13,192.169.0.0/16,192.170.0.0/15,192.172.0.0/14,192.176.0.0/12,192.192.0.0/10,193.0.0.0/8,194.0.0.0/7,196.0.0.0/6,200.0.0.0/5,208.0.0.0/4,224.0.0.0/3
      - LOG_CONFS=true
    volumes:
      - ./config/wireguard:/config
      - /lib/modules:/lib/modules:ro
    ports:
      - "${TRANSMISSION_PORT}:9091"
      - "${TRANSMISSION_PEER_PORT}:51413"
      - "${TRANSMISSION_PEER_PORT}:51413/udp"
      # Jackett
      - "${JACKETT_PORT}:9117"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=${DISABLE_IPV6}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "${VPN_HEALTH_CHECK_IP}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Torrent Client
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    network_mode: service:wireguard
    depends_on:
      wireguard:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - USER=${TRANSMISSION_USER}
      - PASS=${TRANSMISSION_PASS}
      - WHITELIST=${TRANSMISSION_WHITELIST}
      - PEERPORT=${TRANSMISSION_PEER_PORT}
      - HOST_WHITELIST=${TRANSMISSION_HOST_WHITELIST}
    volumes:
      - ./config/transmission:/config
      - ${DOWNLOAD_PATH}:/downloads
      - ${MEDIA_PATH}:/media
      - ./scripts/post-download.sh:/scripts/post-download.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Indexer Proxy
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    network_mode: service:wireguard
    depends_on:
      wireguard:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true
    volumes:
      - ./config/jackett:/config
      - ${DOWNLOAD_PATH}/watch:/downloads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9117", "--max-time", "10"]
      interval: 30s
      timeout: 15s
      retries: 3

  # Media Server
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    user: ${PUID}:${PGID}
    group_add:
      - "109"  # render group for hardware acceleration
    environment:
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_URL}
    volumes:
      - ./config/jellyfin:/config
      - ${MEDIA_PATH}:/media:ro
      - ${DOWNLOAD_PATH}/complete:/downloads:ro
      - /opt/vc/lib:/opt/vc/lib:ro  # Raspberry Pi GPU libraries
    # devices:
      # Hardware acceleration for Raspberry Pi
      # - /dev/vchiq:/dev/vchiq
      # - /dev/vcsm:/dev/vcsm
      # - /dev/video10:/dev/video10
      # - /dev/video11:/dev/video11
      # - /dev/video12:/dev/video12
    ports:
      - "${JELLYFIN_PORT}:8096"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Container Health Monitor
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - AUTOHEAL_INTERVAL=300
      - AUTOHEAL_START_PERIOD=600
      - WEBHOOK_URL=${AUTOHEAL_WEBHOOK_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  # Automatic Updates (Optional)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_SCHEDULE=0 0 3 * * *
      - WATCHTOWER_NOTIFICATIONS=${WATCHTOWER_NOTIFICATIONS}
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped